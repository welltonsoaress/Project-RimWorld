@tool
class_name ObjectGenerator
extends TileMapLayer

# === CONFIGURA√á√ïES ===
@export_group("Controles")
@export var generate_objects: bool = false:
	set(value):
		if value:
			generate_objects = false
			generate()

@export var clear_objects: bool = false:
	set(value):
		if value:
			clear_objects = false
			clear()

# === CONFIGURA√á√ïES DE DENSIDADE ===
@export_group("Densidade de Vegeta√ß√£o")
@export_range(0.0, 0.3) var grass_density: float = 0.06  # Reduzido
@export_range(0.0, 0.15) var tree_density: float = 0.03  # Reduzido
@export_range(0.0, 0.1) var bush_density: float = 0.015  # Reduzido

# === CONFIGURA√á√ïES DE ESPA√áAMENTO ===
@export_group("Espa√ßamento de Recursos")
@export_range(1, 5) var resource_avoidance_radius: int = 2  # Raio de evita√ß√£o de recursos
@export_range(1, 3) var object_spacing: int = 1  # Espa√ßamento m√≠nimo entre objetos

@export_group("Modificadores por Bioma")
@export_range(0.0, 5.0) var forest_vegetation_bonus: float = 2.5
@export_range(0.0, 2.0) var grassland_bonus: float = 1.2
@export_range(0.0, 1.0) var desert_penalty: float = 0.15

@export_group("Debug")
@export var debug_object_placement: bool = false

# === SISTEMA DE OBJETOS ===
var terrain_generator: TileMapLayer
var resource_generator: TileMapLayer
var map_width: int = 128
var map_height: int = 128
var occupied_positions: Dictionary = {}  # Posi√ß√µes ocupadas por recursos
var placed_objects: Dictionary = {}  # Posi√ß√µes ocupadas por objetos j√° colocados

var object_configs = {
	"grass": {
		"atlas_coords": Vector2i(0, 0),
		"base_chance": 0.06,
		"blocks_movement": false,
		"biome_preferences": {
			"grassland": 1.2,
			"forest": 1.8,
			"hills": 0.7,
			"beach": 0.2,
			"mountain": 0.1,
			"desert": 0.08,
			"ocean": 0.0
		}
	},
	"tree": {
		"atlas_coords": Vector2i(1, 0),
		"base_chance": 0.03,
		"blocks_movement": true,
		"biome_preferences": {
			"forest": 3.0,
			"grassland": 0.8,
			"hills": 0.5,
			"mountain": 0.2,
			"beach": 0.0,
			"desert": 0.03,
			"ocean": 0.0
		}
	},
	"bush": {
		"atlas_coords": Vector2i(2, 1),
		"base_chance": 0.015,
		"blocks_movement": false,
		"biome_preferences": {
			"forest": 1.5,
			"grassland": 1.0,
			"hills": 1.2,
			"desert": 0.2,
			"mountain": 0.3,
			"beach": 0.05,
			"ocean": 0.0
		}
	}
}

func _ready():
	print("üåø ObjectGenerator iniciado")
	add_to_group("objects")
	
	setup_tileset()
	find_generators()
	
	if not Engine.is_editor_hint():
		await get_tree().process_frame
		await get_tree().create_timer(2.0).timeout
		generate()

func setup_tileset():
	"""Configura TileSet automaticamente"""
	if tile_set:
		return
	
	var new_tileset = TileSet.new()
	var atlas_source = TileSetAtlasSource.new()
	
	var texture_path = "res://TileSets/textureAtlas.png"
	if not FileAccess.file_exists(texture_path):
		print("‚ùå Textura de objetos n√£o encontrada")
		return
	
	atlas_source.texture = load(texture_path)
	atlas_source.texture_region_size = Vector2i(32, 32)
	
	atlas_source.create_tile(Vector2i(0, 0))  # Grama
	atlas_source.create_tile(Vector2i(1, 0))  # √Årvore
	atlas_source.create_tile(Vector2i(2, 1))  # Arbusto
	
	new_tileset.add_source(atlas_source, 0)
	tile_set = new_tileset
	
	print("‚úÖ ObjectGenerator: TileSet configurado")

func find_generators():
	"""Encontra outros geradores na cena"""
	print("üîç ObjectGenerator buscando depend√™ncias...")
	
	# Busca TerrainGenerator
	var terrain_nodes = get_tree().get_nodes_in_group("terrain")
	if terrain_nodes.size() > 0:
		terrain_generator = terrain_nodes[0]
		if "map_width" in terrain_generator:
			map_width = terrain_generator.map_width
		if "map_height" in terrain_generator:
			map_height = terrain_generator.map_height
		print("‚úÖ TerrainGenerator encontrado: ", terrain_generator.get_path())
		print("üìè Dimens√µes do mapa: ", map_width, "x", map_height)
	else:
		print("‚ùå ERRO: TerrainGenerator n√£o encontrado!")
	
	# Busca ResourceGenerator
	var resource_nodes = get_tree().get_nodes_in_group("resources")
	if resource_nodes.size() > 0:
		resource_generator = resource_nodes[0]
		print("‚úÖ ResourceGenerator encontrado: ", resource_generator.get_path())
	else:
		print("‚ùå AVISO: ResourceGenerator n√£o encontrado!")

func generate():
	"""Gera objetos evitando sobreposi√ß√£o com recursos - VERS√ÉO MELHORADA COM ESPA√áAMENTO"""
	print("üåø Gerando objetos com espa√ßamento de recursos...")
	clear()
	placed_objects.clear()
	
	if not terrain_generator or not resource_generator:
		find_generators()
	
	if not terrain_generator:
		print("‚ùå TerrainGenerator n√£o encontrado!")
		return
	
	force_correct_positioning()
	
	# MELHORIA: Mapeia posi√ß√µes ocupadas com √°rea de influ√™ncia
	map_resource_positions_with_buffer()
	
	var object_stats = {}
	var blocked_by_resources = 0
	var blocked_by_water = 0
	var blocked_by_spacing = 0
	
	print("üìç Gerando objetos em mapa ", map_width, "x", map_height)
	print("üö´ √Årea bloqueada por recursos (incluindo buffer): ", occupied_positions.size())
	print("üõ°Ô∏è Raio de evita√ß√£o de recursos: ", resource_avoidance_radius)
	print("üìè Espa√ßamento entre objetos: ", object_spacing)
	
	# Inicializa estat√≠sticas
	for object_name in object_configs:
		object_stats[object_name] = 0
	
	# Gera objetos por tipo, verificando espa√ßamento
	for object_name in object_configs:
		var config = object_configs[object_name]
		var base_chance = config["base_chance"]
		
		for x in range(map_width):
			for y in range(map_height):
				var pos = Vector2i(x, y)
				
				# Verifica se j√° tem objeto nesta posi√ß√£o
				if str(pos) in placed_objects:
					continue
				
				# VERIFICA√á√ÉO PRINCIPAL: √Årea de influ√™ncia de recursos
				if is_position_in_resource_influence_area(pos):
					blocked_by_resources += 1
					continue
				
				# Verifica se √© √°gua
				var biome = get_biome_at_position(pos)
				if biome == "ocean":
					blocked_by_water += 1
					continue
				
				# NOVA VERIFICA√á√ÉO: Espa√ßamento entre objetos
				if not has_adequate_object_spacing(pos):
					blocked_by_spacing += 1
					continue
				
				# Calcula chance modificada por bioma
				var biome_preference = config["biome_preferences"].get(biome, 0.0)
				var final_chance = base_chance * biome_preference
				
				# Testa gera√ß√£o
				if randf() < final_chance:
					if place_object_safe(pos, object_name):
						object_stats[object_name] += 1
						placed_objects[str(pos)] = object_name
	
	print("üö´ Objetos bloqueados - Recursos: ", blocked_by_resources, " √Ågua: ", blocked_by_water, " Espa√ßamento: ", blocked_by_spacing)
	print_object_statistics(object_stats, map_width * map_height)
	print("‚úÖ Objetos gerados com espa√ßamento adequado!")

func map_resource_positions_with_buffer():
	"""Mapeia posi√ß√µes ocupadas por recursos INCLUINDO √ÅREA DE INFLU√äNCIA"""
	print("üìç Mapeando posi√ß√µes de recursos com buffer de ", resource_avoidance_radius, " tiles...")
	
	occupied_positions.clear()
	
	if not resource_generator:
		return
	
	var resource_positions = []
	var direct_count = 0
	
	# Primeiro, encontra todas as posi√ß√µes com recursos
	for x in range(map_width):
		for y in range(map_height):
			var pos = Vector2i(x, y)
			if resource_generator.get_cell_source_id(pos) != -1:
				resource_positions.append(pos)
				direct_count += 1
	
	print("üó∫Ô∏è ", direct_count, " posi√ß√µes com recursos encontradas")
	
	# Agora, marca √°rea de influ√™ncia ao redor de cada recurso
	var influence_count = 0
	
	for resource_pos in resource_positions:
		# Marca a posi√ß√£o do recurso
		occupied_positions[str(resource_pos)] = true
		
		# Marca √°rea de influ√™ncia ao redor
		for dx in range(-resource_avoidance_radius, resource_avoidance_radius + 1):
			for dy in range(-resource_avoidance_radius, resource_avoidance_radius + 1):
				var influence_pos = resource_pos + Vector2i(dx, dy)
				
				# Verifica se est√° dentro dos limites do mapa
				if (influence_pos.x >= 0 and influence_pos.x < map_width and 
					influence_pos.y >= 0 and influence_pos.y < map_height):
					
					var pos_key = str(influence_pos)
					if not pos_key in occupied_positions:
						occupied_positions[pos_key] = true
						influence_count += 1
	
	print("üõ°Ô∏è ", influence_count, " posi√ß√µes adicionais bloqueadas por √°rea de influ√™ncia")
	print("üìä Total de posi√ß√µes bloqueadas: ", occupied_positions.size())

func is_position_in_resource_influence_area(pos: Vector2i) -> bool:
	"""Verifica se uma posi√ß√£o est√° na √°rea de influ√™ncia de recursos"""
	return str(pos) in occupied_positions

func has_adequate_object_spacing(pos: Vector2i) -> bool:
	"""Verifica se h√° espa√ßamento adequado entre objetos"""
	if object_spacing <= 0:
		return true
	
	# Verifica se h√° outros objetos no raio de espa√ßamento
	for dx in range(-object_spacing, object_spacing + 1):
		for dy in range(-object_spacing, object_spacing + 1):
			if dx == 0 and dy == 0:
				continue  # Pula a posi√ß√£o central
			
			var check_pos = pos + Vector2i(dx, dy)
			
			# Verifica se est√° dentro dos limites
			if (check_pos.x >= 0 and check_pos.x < map_width and 
				check_pos.y >= 0 and check_pos.y < map_height):
				
				# Verifica se j√° tem objeto nesta posi√ß√£o
				if str(check_pos) in placed_objects:
					return false
				
				# Verifica tamb√©m se j√° tem objeto colocado no TileMapLayer
				if get_cell_source_id(check_pos) != -1:
					return false
	
	return true

func set_occupied_positions(positions: Dictionary):
	"""Define posi√ß√µes ocupadas externamente (usado pelo coordenador)"""
	occupied_positions = positions
	print("üìç Recebidas ", positions.size(), " posi√ß√µes ocupadas")
	
	# MELHORIA: Expande as posi√ß√µes recebidas com buffer
	if resource_avoidance_radius > 0:
		var expanded_positions = {}
		
		# Copia as posi√ß√µes originais
		for pos_str in positions:
			expanded_positions[pos_str] = true
		
		# Expande cada posi√ß√£o com o raio de evita√ß√£o
		for pos_str in positions:
			# Parse da string da posi√ß√£o
			var pos_clean = pos_str.replace("(", "").replace(")", "")
			var parts = pos_clean.split(", ")
			if parts.size() >= 2:
				var base_pos = Vector2i(int(parts[0]), int(parts[1]))
				
				# Adiciona √°rea de influ√™ncia
				for dx in range(-resource_avoidance_radius, resource_avoidance_radius + 1):
					for dy in range(-resource_avoidance_radius, resource_avoidance_radius + 1):
						var influence_pos = base_pos + Vector2i(dx, dy)
						
						if (influence_pos.x >= 0 and influence_pos.x < map_width and 
							influence_pos.y >= 0 and influence_pos.y < map_height):
							expanded_positions[str(influence_pos)] = true
		
		occupied_positions = expanded_positions
		print("üõ°Ô∏è Posi√ß√µes expandidas com buffer: ", occupied_positions.size())

func place_object_safe(pos: Vector2i, object_name: String) -> bool:
	"""Coloca um objeto COM VERIFICA√á√ÉO M√öLTIPLA"""
	# Verifica√ß√£o de √°rea de influ√™ncia de recursos
	if is_position_in_resource_influence_area(pos):
		if debug_object_placement:
			print("üö´ Tentativa de colocar objeto em √°rea de influ√™ncia de recurso: ", pos)
		return false
	
	# Verifica√ß√£o de espa√ßamento entre objetos
	if not has_adequate_object_spacing(pos):
		if debug_object_placement:
			print("üö´ Tentativa de colocar objeto muito pr√≥ximo de outro: ", pos)
		return false
	
	if is_valid_position_for_object(pos, object_name):
		var config = object_configs[object_name]
		var atlas_coords = config["atlas_coords"]
		
		set_cell(pos, 0, atlas_coords)
		
		if debug_object_placement and placed_objects.size() <= 10:
			print("üåø Objeto '", object_name, "' colocado em: ", pos)
		
		return true
	
	return false

func is_valid_position_for_object(pos: Vector2i, object_name: String) -> bool:
	"""Verifica se uma posi√ß√£o √© v√°lida para um objeto"""
	if not terrain_generator:
		return false
	
	# VERIFICA√á√ÉO: √Årea de influ√™ncia de recursos
	if is_position_in_resource_influence_area(pos):
		return false
	
	# Verifica bioma
	var biome = get_biome_at_position(pos)
	if biome == "ocean":
		return false
	
	var config = object_configs[object_name]
	var biome_preference = config["biome_preferences"].get(biome, 0.0)
	
	return biome_preference > 0.0

func get_biome_at_position(pos: Vector2i) -> String:
	"""Obt√©m bioma em uma posi√ß√£o"""
	if not terrain_generator:
		return "grassland"
	
	if terrain_generator.has_method("get_biome_at_position"):
		return terrain_generator.get_biome_at_position(pos.x, pos.y)
	else:
		var terrain_tile = terrain_generator.get_cell_atlas_coords(pos)
		return get_biome_from_terrain_tile(terrain_tile)

func get_biome_from_terrain_tile(terrain_tile: Vector2i) -> String:
	"""Converte tile de terreno em nome de bioma"""
	match terrain_tile:
		Vector2i(0, 1): return "ocean"
		Vector2i(1, 1): return "beach"
		Vector2i(2, 1): return "desert"
		Vector2i(0, 0): return "grassland"
		Vector2i(1, 0): return "forest"
		Vector2i(2, 0): return "hills"
		Vector2i(3, 0): return "mountain"
		_: return "grassland"

func force_correct_positioning():
	"""For√ßa posicionamento correto"""
	visible = true
	enabled = true
	z_index = 2
	scale = Vector2(2.0, 2.0)
	position = Vector2(0, 0)
	modulate = Color.WHITE

func print_object_statistics(stats: Dictionary, total_tiles: int):
	"""Imprime estat√≠sticas dos objetos"""
	print("\nüìä === ESTAT√çSTICAS DE OBJETOS ===")
	var total_objects = 0
	
	for object_name in stats:
		var count = stats[object_name]
		total_objects += count
		var density = float(count) / float(total_tiles) * 100.0
		print("üåø ", object_name.capitalize(), ": ", count, " (", "%.3f" % density, "%)")
	
	var total_density = float(total_objects) / float(total_tiles) * 100.0
	print("üì¶ Total de objetos: ", total_objects, " (", "%.3f" % total_density, "%)")
	print("=== FIM ESTAT√çSTICAS ===\n")

# === VERIFICA√á√ÉO DE COLIS√ïES ===
@export_group("Debug e Verifica√ß√£o")
@export var verify_no_collisions: bool = false:
	set(value):
		if value:
			verify_no_collisions = false
			check_collisions_with_resources()

func check_collisions_with_resources():
	"""Verifica se h√° colis√µes entre objetos e recursos"""
	print("\nüîç === VERIFICA√á√ÉO DE COLIS√ïES ===")
	
	if not resource_generator:
		print("‚ùå ResourceGenerator n√£o encontrado")
		return
	
	var collision_count = 0
	var sample_positions = []
	var near_miss_count = 0  # Objetos pr√≥ximos mas n√£o sobrepostos
	
	for x in range(0, map_width, 2):  # Amostragem mais densa
		for y in range(0, map_height, 2):
			var pos = Vector2i(x, y)
			
			var has_resource = resource_generator.get_cell_source_id(pos) != -1
			var has_object = get_cell_source_id(pos) != -1
			
			if has_resource and has_object:
				collision_count += 1
				if sample_positions.size() < 5:
					sample_positions.append(pos)
			elif has_object and not has_resource:
				# Verifica se h√° recursos pr√≥ximos
				var has_nearby_resource = false
				for dx in range(-resource_avoidance_radius, resource_avoidance_radius + 1):
					for dy in range(-resource_avoidance_radius, resource_avoidance_radius + 1):
						var check_pos = pos + Vector2i(dx, dy)
						if (check_pos.x >= 0 and check_pos.x < map_width and 
							check_pos.y >= 0 and check_pos.y < map_height):
							if resource_generator.get_cell_source_id(check_pos) != -1:
								has_nearby_resource = true
								break
					if has_nearby_resource:
						break
				
				if has_nearby_resource:
					near_miss_count += 1
	
	print("üéØ Resultado da verifica√ß√£o:")
	print("  - Colis√µes diretas encontradas: ", collision_count)
	print("  - Objetos pr√≥ximos a recursos (dentro do raio): ", near_miss_count)
	
	if collision_count == 0:
		print("‚úÖ Nenhuma colis√£o direta detectada!")
		if near_miss_count > 0:
			print("‚ÑπÔ∏è ", near_miss_count, " objetos est√£o pr√≥ximos a recursos (comportamento esperado)")
	else:
		print("‚ö†Ô∏è Colis√µes diretas encontradas:")
		for pos in sample_positions:
			print("    ‚ùå Colis√£o direta em: ", pos)
	
	print("=== FIM VERIFICA√á√ÉO ===\n")

# === FUN√á√ïES DE DEBUG APRIMORADAS ===
@export_group("Debug Avan√ßado")
@export var analyze_spacing: bool = false:
	set(value):
		if value:
			analyze_spacing = false
			analyze_object_spacing()

func analyze_object_spacing():
	"""Analisa o espa√ßamento real entre objetos"""
	print("\nüîç === AN√ÅLISE DE ESPA√áAMENTO ===")
	
	var object_positions = []
	var spacing_violations = 0
	
	# Coleta todas as posi√ß√µes com objetos
	for x in range(map_width):
		for y in range(map_height):
			var pos = Vector2i(x, y)
			if get_cell_source_id(pos) != -1:
				object_positions.append(pos)
	
	print("üìä Total de objetos encontrados: ", object_positions.size())
	
	# Verifica espa√ßamento entre todos os pares
	for i in range(object_positions.size()):
		for j in range(i + 1, object_positions.size()):
			var pos1 = object_positions[i]
			var pos2 = object_positions[j]
			var distance = pos1.distance_to(pos2)
			
			if distance <= object_spacing and distance > 0:
				spacing_violations += 1
				if spacing_violations <= 5:  # Mostra apenas os primeiros 5
					print("‚ö†Ô∏è Viola√ß√£o de espa√ßamento: ", pos1, " <-> ", pos2, " (dist√¢ncia: ", "%.1f" % distance, ")")
	
	if spacing_violations == 0:
		print("‚úÖ Todos os objetos respeitam o espa√ßamento m√≠nimo de ", object_spacing)
	else:
		print("‚ö†Ô∏è ", spacing_violations, " viola√ß√µes de espa√ßamento encontradas")
	
	print("=== FIM AN√ÅLISE DE ESPA√áAMENTO ===\n")

func _process(_delta):
	if not Engine.is_editor_hint():
		if position != Vector2(0, 0) or scale != Vector2(2.0, 2.0):
			position = Vector2(0, 0)
			scale = Vector2(2.0, 2.0)
